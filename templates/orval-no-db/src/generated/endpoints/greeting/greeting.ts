/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Vinoflare API
 * REST API for Vinoflare application
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetHello200
} from '../../schemas';

import { customFetch } from '../../../client/lib/custom-fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Returns a greeting message with the current timestamp
 * @summary Hello endpoint
 */
export type getHelloResponse200 = {
  data: GetHello200
  status: 200
}
    
export type getHelloResponseComposite = getHelloResponse200;
    
export type getHelloResponse = getHelloResponseComposite & {
  headers: Headers;
}

export const getGetHelloUrl = () => {


  

  return `/api/hello`
}

export const getHello = async ( options?: RequestInit): Promise<getHelloResponse> => {
  
  return customFetch<getHelloResponse>(getGetHelloUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetHelloQueryKey = () => {
    return [`/api/hello`] as const;
    }

    
export const getGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHello>>> = ({ signal }) => getHello({ signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof getHello>>>
export type GetHelloQueryError = unknown


export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHello>>,
          TError,
          Awaited<ReturnType<typeof getHello>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHello>>,
          TError,
          Awaited<ReturnType<typeof getHello>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Hello endpoint
 */

export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetHelloQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



