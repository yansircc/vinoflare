// Auto-generated React Query hooks
// Generated at: 2025-06-23T05:13:02.697Z
// DO NOT EDIT THIS FILE MANUALLY

import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import type {
	UseMutationOptions,
	UseQueryOptions,
} from "@tanstack/react-query";
import { type ApiError, apiClient } from "./client";
import type { NewTask, PatchTask, Task } from "./client";

// Tasks hooks
export const useTasks = (
	options?: Omit<UseQueryOptions<Task[], ApiError>, "queryKey" | "queryFn">,
) => {
	return useQuery({
		queryKey: ["tasks"],
		queryFn: () => apiClient.tasks.list(),
		...options,
	});
};

export const useTask = (
	id: number,
	options?: Omit<
		UseQueryOptions<Task, ApiError>,
		"queryKey" | "queryFn" | "enabled"
	>,
) => {
	return useQuery({
		queryKey: ["tasks", id],
		queryFn: () => apiClient.tasks.get(id),
		enabled: !!id,
		...options,
	});
};

export const useCreateTask = (
	options?: Omit<UseMutationOptions<Task, ApiError, NewTask>, "mutationFn">,
) => {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: (data: NewTask) => apiClient.tasks.create(data),
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ["tasks"] });
		},
		...options,
	});
};

export const useUpdateTask = (
	options?: Omit<
		UseMutationOptions<Task, ApiError, { id: number; data: PatchTask }>,
		"mutationFn"
	>,
) => {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: ({ id, data }) => apiClient.tasks.update(id, data),
		onSuccess: (_data, { id }) => {
			queryClient.invalidateQueries({ queryKey: ["tasks"] });
			queryClient.invalidateQueries({ queryKey: ["tasks", id] });
		},
		...options,
	});
};

export const useDeleteTask = (
	options?: Omit<UseMutationOptions<void, ApiError, number>, "mutationFn">,
) => {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: (id: number) => apiClient.tasks.delete(id),
		onSuccess: (_data, id) => {
			queryClient.invalidateQueries({ queryKey: ["tasks"] });
			queryClient.invalidateQueries({ queryKey: ["tasks", id] });
		},
		...options,
	});
};

// Health check hook
export const useHealthCheck = (
	options?: Omit<UseQueryOptions<any, ApiError>, "queryKey" | "queryFn">,
) => {
	return useQuery({
		queryKey: ["health"],
		queryFn: () => apiClient.health(),
		...options,
	});
};

// Current user hook
export const useMe = (
	options?: Omit<UseQueryOptions<any, ApiError>, "queryKey" | "queryFn">,
) => {
	return useQuery({
		queryKey: ["me"],
		queryFn: () => apiClient.me(),
		...options,
	});
};
