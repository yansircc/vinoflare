// Auto-generated React Query hooks
// Generated at: 2025-06-23T06:00:58.038Z
// DO NOT EDIT THIS FILE MANUALLY

import {
	type UseMutationOptions,
	type UseQueryOptions,
	useMutation,
	useQuery,
	useQueryClient,
} from "@tanstack/react-query";
import { type ApiError, apiClient } from "./client";
import type * as Types from "./client";
import type { PatchTask } from "./client";

/**
 * Usage Examples:
 *
 * // List resources
 * const { data: tasks } = useTasks();
 *
 * // Get single resource
 * const { data: task } = useTask(taskId);
 *
 * // Create resource
 * const createMutation = useCreateTask();
 * await createMutation.mutateAsync({ name: "New Task" });
 *
 * // Update resource
 * const updateMutation = useUpdateTask();
 * await updateMutation.mutateAsync(taskId, { done: true });
 *
 * // Delete resource
 * const deleteMutation = useDeleteTask();
 * await deleteMutation.mutateAsync(taskId);
 *
 * // With custom options
 * const { data } = useTasks({
 *   staleTime: 5 * 60 * 1000, // 5 minutes
 *   refetchInterval: 30 * 1000, // 30 seconds
 * });
 */

/**
 * API
 */
export const useApi = (
	options?: Omit<
		UseQueryOptions<
			{
				name: string;
				version: string;
				description: string;
				endpoints: {
					tasks: string;
					health: string;
					me: string;
				};
				timestamp: string;
			},
			ApiError
		>,
		"queryKey" | "queryFn"
	>,
) => {
	return useQuery({
		queryKey: ["api"],
		queryFn: () => apiClient.api.list(),
		...options,
	});
};

/**
 * Fetch all tasks
 */
export const useTasks = (
	options?: Omit<
		UseQueryOptions<
			Array<{
				id: number;
				name: string;
				done: boolean;
				createdAt: string | null;
				updatedAt: string | null;
			}>,
			ApiError
		>,
		"queryKey" | "queryFn"
	>,
) => {
	return useQuery({
		queryKey: ["tasks"],
		queryFn: () => apiClient.tasks.list(),
		...options,
	});
};

/**
 * POST tasks
 */
export const useCreateTask = (
	options?: Omit<
		UseMutationOptions<
			{
				id: number;
				name: string;
				done: boolean;
				createdAt: string | null;
				updatedAt: string | null;
			},
			ApiError,
			{
				data: {
					name: string;
					done: boolean;
				};
			}
		>,
		"mutationFn"
	>,
) => {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: ({ data }) => apiClient.tasks.create(data),
		onSuccess: (data, variables, context) => {
			queryClient.invalidateQueries({ queryKey: ["tasks"] });
			options?.onSuccess?.(data, variables, context);
		},
		...options,
	});
};

/**
 * Fetch tasks by ID
 */
export const useTask = (
	id: string | number,
	options?: Omit<
		UseQueryOptions<
			{
				id: number;
				name: string;
				done: boolean;
				createdAt: string | null;
				updatedAt: string | null;
			},
			ApiError
		>,
		"queryKey" | "queryFn"
	>,
) => {
	return useQuery({
		queryKey: ["tasks", id],
		queryFn: () => apiClient.tasks.getById(id),
		...options,
	});
};

/**
 * patch tasks
 */
export const useUpdateTask = (
	options?: Omit<
		UseMutationOptions<
			{
				id: number;
				name: string;
				done: boolean;
				createdAt: string | null;
				updatedAt: string | null;
			},
			ApiError,
			{ id: string | number; data: PatchTask }
		>,
		"mutationFn"
	>,
) => {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: ({ id, data }) => apiClient.tasks.update(id, data),
		onSuccess: (data, variables, context) => {
			queryClient.invalidateQueries({ queryKey: ["tasks"] });
			queryClient.invalidateQueries({ queryKey: ["tasks", variables.id] });
			options?.onSuccess?.(data, variables, context);
		},
		...options,
	});
};

/**
 * delete tasks
 */
export const useDeleteTask = (
	options?: Omit<
		UseMutationOptions<void, ApiError, string | number>,
		"mutationFn"
	>,
) => {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: (id) => apiClient.tasks.delete(id),
		onSuccess: (data, id, context) => {
			queryClient.invalidateQueries({ queryKey: ["tasks"] });
			queryClient.invalidateQueries({ queryKey: ["tasks", id] });
			options?.onSuccess?.(data, id, context);
		},
		...options,
	});
};

// Utility hooks for common endpoints
export const useHealthCheck = (
	options?: Omit<UseQueryOptions<any, ApiError>, "queryKey" | "queryFn">,
) => {
	return useQuery({
		queryKey: ["health"],
		queryFn: () =>
			apiClient.health?.list?.() || fetch("/api/health").then((r) => r.json()),
		...options,
	});
};

export const useMe = (
	options?: Omit<UseQueryOptions<any, ApiError>, "queryKey" | "queryFn">,
) => {
	return useQuery({
		queryKey: ["me"],
		queryFn: () =>
			apiClient.me?.list?.() || fetch("/api/me").then((r) => r.json()),
		...options,
	});
};
