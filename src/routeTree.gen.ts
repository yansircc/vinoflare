/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as QuotesImport } from './routes/quotes'
import { Route as IndexImport } from './routes/index'
import { Route as QuotesIndexImport } from './routes/quotes.index'
import { Route as QuotesNewImport } from './routes/quotes.new'
import { Route as QuotesQuoteIdEditImport } from './routes/quotes.$quoteId.edit'

// Create/Update Routes

const QuotesRoute = QuotesImport.update({
  id: '/quotes',
  path: '/quotes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const QuotesIndexRoute = QuotesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => QuotesRoute,
} as any)

const QuotesNewRoute = QuotesNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => QuotesRoute,
} as any)

const QuotesQuoteIdEditRoute = QuotesQuoteIdEditImport.update({
  id: '/$quoteId/edit',
  path: '/$quoteId/edit',
  getParentRoute: () => QuotesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/quotes': {
      id: '/quotes'
      path: '/quotes'
      fullPath: '/quotes'
      preLoaderRoute: typeof QuotesImport
      parentRoute: typeof rootRoute
    }
    '/quotes/new': {
      id: '/quotes/new'
      path: '/new'
      fullPath: '/quotes/new'
      preLoaderRoute: typeof QuotesNewImport
      parentRoute: typeof QuotesImport
    }
    '/quotes/': {
      id: '/quotes/'
      path: '/'
      fullPath: '/quotes/'
      preLoaderRoute: typeof QuotesIndexImport
      parentRoute: typeof QuotesImport
    }
    '/quotes/$quoteId/edit': {
      id: '/quotes/$quoteId/edit'
      path: '/$quoteId/edit'
      fullPath: '/quotes/$quoteId/edit'
      preLoaderRoute: typeof QuotesQuoteIdEditImport
      parentRoute: typeof QuotesImport
    }
  }
}

// Create and export the route tree

interface QuotesRouteChildren {
  QuotesNewRoute: typeof QuotesNewRoute
  QuotesIndexRoute: typeof QuotesIndexRoute
  QuotesQuoteIdEditRoute: typeof QuotesQuoteIdEditRoute
}

const QuotesRouteChildren: QuotesRouteChildren = {
  QuotesNewRoute: QuotesNewRoute,
  QuotesIndexRoute: QuotesIndexRoute,
  QuotesQuoteIdEditRoute: QuotesQuoteIdEditRoute,
}

const QuotesRouteWithChildren =
  QuotesRoute._addFileChildren(QuotesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/quotes': typeof QuotesRouteWithChildren
  '/quotes/new': typeof QuotesNewRoute
  '/quotes/': typeof QuotesIndexRoute
  '/quotes/$quoteId/edit': typeof QuotesQuoteIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/quotes/new': typeof QuotesNewRoute
  '/quotes': typeof QuotesIndexRoute
  '/quotes/$quoteId/edit': typeof QuotesQuoteIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/quotes': typeof QuotesRouteWithChildren
  '/quotes/new': typeof QuotesNewRoute
  '/quotes/': typeof QuotesIndexRoute
  '/quotes/$quoteId/edit': typeof QuotesQuoteIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/quotes'
    | '/quotes/new'
    | '/quotes/'
    | '/quotes/$quoteId/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/quotes/new' | '/quotes' | '/quotes/$quoteId/edit'
  id:
    | '__root__'
    | '/'
    | '/quotes'
    | '/quotes/new'
    | '/quotes/'
    | '/quotes/$quoteId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  QuotesRoute: typeof QuotesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  QuotesRoute: QuotesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/quotes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/quotes": {
      "filePath": "quotes.tsx",
      "children": [
        "/quotes/new",
        "/quotes/",
        "/quotes/$quoteId/edit"
      ]
    },
    "/quotes/new": {
      "filePath": "quotes.new.tsx",
      "parent": "/quotes"
    },
    "/quotes/": {
      "filePath": "quotes.index.tsx",
      "parent": "/quotes"
    },
    "/quotes/$quoteId/edit": {
      "filePath": "quotes.$quoteId.edit.tsx",
      "parent": "/quotes"
    }
  }
}
ROUTE_MANIFEST_END */
