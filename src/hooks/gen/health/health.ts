/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Vinoflare API
 * 基于 Vite，Hono 和 Cloudflare Workers 的 API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryClient,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";

import type { GetApiHealth200 } from ".././model";

/**
 * 健康检查端点
 * @summary Health
 */
export const getGetApiHealthUrl = () => {
	return `/api/health`;
};

export const getApiHealth = async (
	options?: RequestInit,
): Promise<GetApiHealth200> => {
	const res = await fetch(getGetApiHealthUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: GetApiHealth200 = body ? JSON.parse(body) : {};

	return data;
};

export const getGetApiHealthQueryKey = () => {
	return [`/api/health`] as const;
};

export const getGetApiHealthQueryOptions = <
	TData = Awaited<ReturnType<typeof getApiHealth>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetApiHealthQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiHealth>>> = ({
		signal,
	}) => getApiHealth({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getApiHealth>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiHealthQueryResult = NonNullable<
	Awaited<ReturnType<typeof getApiHealth>>
>;
export type GetApiHealthQueryError = unknown;

export function useGetApiHealth<
	TData = Awaited<ReturnType<typeof getApiHealth>>,
	TError = unknown,
>(
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiHealth>>,
					TError,
					Awaited<ReturnType<typeof getApiHealth>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiHealth<
	TData = Awaited<ReturnType<typeof getApiHealth>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getApiHealth>>,
					TError,
					Awaited<ReturnType<typeof getApiHealth>>
				>,
				"initialData"
			>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiHealth<
	TData = Awaited<ReturnType<typeof getApiHealth>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Health
 */

export function useGetApiHealth<
	TData = Awaited<ReturnType<typeof getApiHealth>>,
	TError = unknown,
>(
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getApiHealth>>, TError, TData>
		>;
		fetch?: RequestInit;
	},
	queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetApiHealthQueryOptions(options);

	const query = useQuery(queryOptions, queryClient) as UseQueryResult<
		TData,
		TError
	> & { queryKey: DataTag<QueryKey, TData, TError> };

	query.queryKey = queryOptions.queryKey;

	return query;
}
