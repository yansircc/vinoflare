/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Tasks API
 * 基于 Hono 和 Cloudflare Workers 的任务管理 API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DeleteApiTasksId404,
  DeleteApiTasksId422,
  GetApiTasks200Item,
  GetApiTasksId200,
  GetApiTasksId404,
  GetApiTasksId422,
  PatchApiTasksId200,
  PatchApiTasksId404,
  PatchApiTasksId422,
  PatchApiTasksIdBody,
  PostApiTasks200,
  PostApiTasks422,
  PostApiTasksBody
} from '.././model';





export const getGetApiTasksUrl = () => {


  

  return `http://localhost:5173/api/tasks`
}

export const getApiTasks = async ( options?: RequestInit): Promise<GetApiTasks200Item[]> => {
  
  const res = await fetch(getGetApiTasksUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetApiTasks200Item[] = body ? JSON.parse(body) : {}

  return data
}



export const getGetApiTasksQueryKey = () => {
    return [`http://localhost:5173/api/tasks`] as const;
    }

    
export const getGetApiTasksQueryOptions = <TData = Awaited<ReturnType<typeof getApiTasks>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasks>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTasksQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTasks>>> = ({ signal }) => getApiTasks({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTasks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTasks>>>
export type GetApiTasksQueryError = unknown


export function useGetApiTasks<TData = Awaited<ReturnType<typeof getApiTasks>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTasks>>,
          TError,
          Awaited<ReturnType<typeof getApiTasks>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTasks<TData = Awaited<ReturnType<typeof getApiTasks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTasks>>,
          TError,
          Awaited<ReturnType<typeof getApiTasks>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTasks<TData = Awaited<ReturnType<typeof getApiTasks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasks>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiTasks<TData = Awaited<ReturnType<typeof getApiTasks>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasks>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTasksQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPostApiTasksUrl = () => {


  

  return `http://localhost:5173/api/tasks`
}

export const postApiTasks = async (postApiTasksBody: PostApiTasksBody, options?: RequestInit): Promise<PostApiTasks200> => {
  
  const res = await fetch(getPostApiTasksUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postApiTasksBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostApiTasks200 = body ? JSON.parse(body) : {}

  return data
}




export const getPostApiTasksMutationOptions = <TError = PostApiTasks422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTasks>>, TError,{data: PostApiTasksBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postApiTasks>>, TError,{data: PostApiTasksBody}, TContext> => {

const mutationKey = ['postApiTasks'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiTasks>>, {data: PostApiTasksBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiTasks(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiTasksMutationResult = NonNullable<Awaited<ReturnType<typeof postApiTasks>>>
    export type PostApiTasksMutationBody = PostApiTasksBody
    export type PostApiTasksMutationError = PostApiTasks422

    export const usePostApiTasks = <TError = PostApiTasks422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiTasks>>, TError,{data: PostApiTasksBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiTasks>>,
        TError,
        {data: PostApiTasksBody},
        TContext
      > => {

      const mutationOptions = getPostApiTasksMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getGetApiTasksIdUrl = (id: number | null,) => {


  

  return `http://localhost:5173/api/tasks/${id}`
}

export const getApiTasksId = async (id: number | null, options?: RequestInit): Promise<GetApiTasksId200> => {
  
  const res = await fetch(getGetApiTasksIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetApiTasksId200 = body ? JSON.parse(body) : {}

  return data
}



export const getGetApiTasksIdQueryKey = (id: number | null,) => {
    return [`http://localhost:5173/api/tasks/${id}`] as const;
    }

    
export const getGetApiTasksIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiTasksId>>, TError = GetApiTasksId404 | GetApiTasksId422>(id: number | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasksId>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTasksIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTasksId>>> = ({ signal }) => getApiTasksId(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiTasksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiTasksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiTasksId>>>
export type GetApiTasksIdQueryError = GetApiTasksId404 | GetApiTasksId422


export function useGetApiTasksId<TData = Awaited<ReturnType<typeof getApiTasksId>>, TError = GetApiTasksId404 | GetApiTasksId422>(
 id: number | null, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTasksId>>,
          TError,
          Awaited<ReturnType<typeof getApiTasksId>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTasksId<TData = Awaited<ReturnType<typeof getApiTasksId>>, TError = GetApiTasksId404 | GetApiTasksId422>(
 id: number | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiTasksId>>,
          TError,
          Awaited<ReturnType<typeof getApiTasksId>>
        > , 'initialData'
      >, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiTasksId<TData = Awaited<ReturnType<typeof getApiTasksId>>, TError = GetApiTasksId404 | GetApiTasksId422>(
 id: number | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasksId>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiTasksId<TData = Awaited<ReturnType<typeof getApiTasksId>>, TError = GetApiTasksId404 | GetApiTasksId422>(
 id: number | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiTasksId>>, TError, TData>>, fetch?: RequestInit}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiTasksIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPatchApiTasksIdUrl = (id: number | null,) => {


  

  return `http://localhost:5173/api/tasks/${id}`
}

export const patchApiTasksId = async (id: number | null,
    patchApiTasksIdBody: PatchApiTasksIdBody, options?: RequestInit): Promise<PatchApiTasksId200> => {
  
  const res = await fetch(getPatchApiTasksIdUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchApiTasksIdBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PatchApiTasksId200 = body ? JSON.parse(body) : {}

  return data
}




export const getPatchApiTasksIdMutationOptions = <TError = PatchApiTasksId404 | PatchApiTasksId422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTasksId>>, TError,{id: number | null;data: PatchApiTasksIdBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchApiTasksId>>, TError,{id: number | null;data: PatchApiTasksIdBody}, TContext> => {

const mutationKey = ['patchApiTasksId'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchApiTasksId>>, {id: number | null;data: PatchApiTasksIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiTasksId(id,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchApiTasksIdMutationResult = NonNullable<Awaited<ReturnType<typeof patchApiTasksId>>>
    export type PatchApiTasksIdMutationBody = PatchApiTasksIdBody
    export type PatchApiTasksIdMutationError = PatchApiTasksId404 | PatchApiTasksId422

    export const usePatchApiTasksId = <TError = PatchApiTasksId404 | PatchApiTasksId422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchApiTasksId>>, TError,{id: number | null;data: PatchApiTasksIdBody}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof patchApiTasksId>>,
        TError,
        {id: number | null;data: PatchApiTasksIdBody},
        TContext
      > => {

      const mutationOptions = getPatchApiTasksIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getDeleteApiTasksIdUrl = (id: number | null,) => {


  

  return `http://localhost:5173/api/tasks/${id}`
}

export const deleteApiTasksId = async (id: number | null, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getDeleteApiTasksIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}




export const getDeleteApiTasksIdMutationOptions = <TError = DeleteApiTasksId404 | DeleteApiTasksId422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTasksId>>, TError,{id: number | null}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiTasksId>>, TError,{id: number | null}, TContext> => {

const mutationKey = ['deleteApiTasksId'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiTasksId>>, {id: number | null}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiTasksId(id,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteApiTasksIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiTasksId>>>
    
    export type DeleteApiTasksIdMutationError = DeleteApiTasksId404 | DeleteApiTasksId422

    export const useDeleteApiTasksId = <TError = DeleteApiTasksId404 | DeleteApiTasksId422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiTasksId>>, TError,{id: number | null}, TContext>, fetch?: RequestInit}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteApiTasksId>>,
        TError,
        {id: number | null},
        TContext
      > => {

      const mutationOptions = getDeleteApiTasksIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    