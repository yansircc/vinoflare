#!/usr/bin/env bun
// 改进版的 API 客户端生成器 - 生成更简洁的代码
import { mkdir, writeFile } from "node:fs/promises";
import { join } from "node:path";
import configureOpenAPI from "../src/server/lib/configure-open-api";
import createApp from "../src/server/lib/create-app";
import authRouter from "../src/server/routes/auth.route";
import indexRoute from "../src/server/routes/index.route";
import tasksRoute from "../src/server/routes/tasks/tasks.index";

// 设置应用路由
const app = createApp();
configureOpenAPI(app);
app.route("/api/auth", authRouter);
const routes = app.route("/api", indexRoute).route("/api", tasksRoute);

async function generateApiClient() {
	console.log("🚀 Starting improved API client generation...");

	// 获取 OpenAPI 文档
	const response = await routes.request("/doc");
	const openApiSpec = (await response.json()) as any;

	// 准备输出目录
	const outputDir = join(process.cwd(), "src/generated");
	await mkdir(outputDir, { recursive: true });

	// 生成简单的 API 客户端
	const apiClientCode = `// Auto-generated API client
// Generated at: ${new Date().toISOString()}
// DO NOT EDIT THIS FILE MANUALLY

export class ApiError extends Error {
  constructor(public status: number, message: string, public data?: any) {
    super(message);
    this.name = "ApiError";
  }
}

async function request<T>(path: string, options?: RequestInit): Promise<T> {
  const response = await fetch(path, {
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });

  if (!response.ok) {
    let errorData: any;
    try {
      errorData = await response.json();
    } catch {
      errorData = null;
    }
    throw new ApiError(response.status, response.statusText, errorData);
  }

  if (response.status === 204) {
    return null as T;
  }

  return response.json();
}

export const apiClient = {
  tasks: {
    list: () => 
      request<Task[]>("/api/tasks"),
    
    get: (id: number) => 
      request<Task>(\`/api/tasks/\${id}\`),
    
    create: (data: NewTask) =>
      request<Task>("/api/tasks", {
        method: "POST",
        body: JSON.stringify(data),
      }),
    
    update: (id: number, data: PatchTask) =>
      request<Task>(\`/api/tasks/\${id}\`, {
        method: "PATCH",
        body: JSON.stringify(data),
      }),
    
    delete: (id: number) =>
      request<void>(\`/api/tasks/\${id}\`, {
        method: "DELETE",
      }),
  },
  
  health: () =>
    request<{
      status: string;
      timestamp: string;
      version: string;
      environment: string;
    }>("/api/health"),
  
  me: () =>
    request<{
      user: AuthUser | null;
      session: AuthSession | null;
    }>("/api/me"),
};

// 从 schema 导入的类型
export type Task = {
  id: number;
  name: string;
  done: boolean;
  createdAt: string | null;
  updatedAt: string | null;
};

export type NewTask = {
  name: string;
  done?: boolean;
};

export type PatchTask = Partial<NewTask>;

export type AuthUser = {
  id: string;
  name: string;
  email: string;
  emailVerified: boolean;
  image: string | null;
  createdAt: Date;
  updatedAt: Date;
};

export type AuthSession = {
  id: string;
  userId: string;
  userAgent: string | null;
  ipAddress: string | null;
  expiresAt: Date;
  createdAt: Date;
  updatedAt: Date;
};
`;

	// 生成 React Query hooks
	const hooksCode = `// Auto-generated React Query hooks
// Generated at: ${new Date().toISOString()}
// DO NOT EDIT THIS FILE MANUALLY

import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import type {
	UseMutationOptions,
	UseQueryOptions,
} from "@tanstack/react-query";
import { type ApiError, apiClient } from "./client";
import type { NewTask, PatchTask, Task } from "./client";

// Tasks hooks
export const useTasks = (
  options?: Omit<UseQueryOptions<Task[], ApiError>, "queryKey" | "queryFn">
) => {
  return useQuery({
    queryKey: ["tasks"],
    queryFn: () => apiClient.tasks.list(),
    ...options,
  });
};

export const useTask = (
  id: number,
  options?: Omit<UseQueryOptions<Task, ApiError>, "queryKey" | "queryFn" | "enabled">
) => {
  return useQuery({
    queryKey: ["tasks", id],
    queryFn: () => apiClient.tasks.get(id),
    enabled: !!id,
    ...options,
  });
};

export const useCreateTask = (
  options?: Omit<UseMutationOptions<Task, ApiError, NewTask>, "mutationFn">
) => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (data: NewTask) => apiClient.tasks.create(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["tasks"] });
    },
    ...options,
  });
};

export const useUpdateTask = (
  options?: Omit<UseMutationOptions<Task, ApiError, { id: number; data: PatchTask }>, "mutationFn">
) => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ id, data }) => apiClient.tasks.update(id, data),
    onSuccess: (_data, { id }) => {
      queryClient.invalidateQueries({ queryKey: ["tasks"] });
      queryClient.invalidateQueries({ queryKey: ["tasks", id] });
    },
    ...options,
  });
};

export const useDeleteTask = (
  options?: Omit<UseMutationOptions<void, ApiError, number>, "mutationFn">
) => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (id: number) => apiClient.tasks.delete(id),
    onSuccess: (_data, id) => {
      queryClient.invalidateQueries({ queryKey: ["tasks"] });
      queryClient.invalidateQueries({ queryKey: ["tasks", id] });
    },
    ...options,
  });
};

// Health check hook
export const useHealthCheck = (
  options?: Omit<UseQueryOptions<any, ApiError>, "queryKey" | "queryFn">
) => {
  return useQuery({
    queryKey: ["health"],
    queryFn: () => apiClient.health(),
    ...options,
  });
};

// Current user hook
export const useMe = (
  options?: Omit<UseQueryOptions<any, ApiError>, "queryKey" | "queryFn">
) => {
  return useQuery({
    queryKey: ["me"],
    queryFn: () => apiClient.me(),
    ...options,
  });
};
`;

	// 生成 index.ts
	const indexCode = `// Auto-generated barrel export
export * from "./client";
export * from "./hooks";
`;

	// 写入文件
	await writeFile(join(outputDir, "client.ts"), apiClientCode);
	await writeFile(join(outputDir, "hooks.ts"), hooksCode);
	await writeFile(join(outputDir, "index.ts"), indexCode);

	console.log("✅ Improved API client generated successfully!");
	console.log("📁 Output directory: src/generated/");
	console.log("📄 Files created:");
	console.log("   - client.ts (API client with types)");
	console.log("   - hooks.ts (React Query hooks)");
	console.log("   - index.ts (barrel export)");
}

// 运行生成器
generateApiClient().catch(console.error);
